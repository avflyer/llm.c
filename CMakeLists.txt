
cmake_minimum_required (VERSION 3.18.0)

project(llm.c)

option(ENABLE_ASM "Enable assembly language." OFF)
option(ENABLE_CUDA "Enable CUDA." ON)
option(USE_CUDNN "Use cuDNN." OFF)
option(USE_OMP "Use openMP." ON)
option(USE_MULTI_GPU "Use multiple GPU." ON)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

enable_language(C CXX ASM)
if (ENABLE_CUDA)
    find_package(CUDAToolkit)
    enable_language(CUDA)
    if (NOT GPU_COMPUTE_CAPABILITY)
        execute_process(COMMAND nvidia-smi --query-gpu=compute_cap --format=csv,noheader
            OUTPUT_VARIABLE _cuda_compute_capability
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        if(_cuda_compute_capability MATCHES "^([0-9]+)\\.([0-9]+)$")
            set(GPU_COMPUTE_CAPABILITY "${CMAKE_MATCH_1}${CMAKE_MATCH_2}")
            message(STATUS "Detected CUDA compute capability: ${GPU_COMPUTE_CAPABILITY}")
        else()
            message(FATAL_ERROR "Failed to detect CUDA compute capability")
        endif()
    endif()
    set(CMAKE_CUDA_ARCHITECTURES ${GPU_COMPUTE_CAPABILITY})
    set(EXTRA_CUDA_LIBS CUDA::cudart CUDA::cuda_driver CUDA::cublas CUDA::cublasLt)
endif()

set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include(CheckIncludeFiles)
include(CheckFunctionExists)
include(CheckSymbolExists)

set(SOURCE ${CMAKE_CURRENT_SOURCE_DIR})
set(DEV_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/dev)

include_directories(${SOURCE})

if (NOT PRECISION)
    set(PRECISION "BF16")
endif()

set(PRECISION_SET "FP32;FP16;BF16") 
list(FIND PRECISION_SET ${PRECISION} index)
if (index EQUAL -1)
    message("Invalid precision. Please choose precision among FP32, FP16, and BF16.")
    return()
elseif(PRECISION STREQUAL "BF16")
    add_definitions(-DENABLE_BF16)
elseif(PRECISION STREQUAL "FP32")
    add_definitions(-DENABLE_FP32)
elseif(PRECISION STREQUAL "FP16")
    add_definitions(-DENABLE_FP16)
endif()

if (NOT WIN32)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ofast -Wno-unused-result -Wno-ignored-pragmas -Wno-unknown-attributes -march=native")
    list(APPEND EXTRA_C_LIBS m)
else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Zi /nologo /Wall /WX- /diagnostics:column /sdl /O2 /Oi /Ot /GL /D _DEBUG /D _CONSOLE /D _UNICODE /D UNICODE /Gm- /EHsc /MD /GS /Gy /fp:fast /Zc:wchar_t /Zc:forScope /Zc:inline /permissive- /external:W3 /Gd /TP /wd4996 /Fd$@.pdb /FC")
    set(NVCC_FLAGS "${NVCC_FLAGS} /EHsc /W0 /nologo /FS")
    include_directories(${DEV_SOURCE})
endif()

if (ENABLE_CUDA)
    add_compile_options("$<$<COMPILE_LANGUAGE:CUDA>:-t=0;--use_fast_math;-Xcompiler=${NVCC_FLAGS}>")
    set(CMAKE_CUDA_STANDARD 17) # It seems c++20 may not be well supported by some versions of nvcc
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
endif()

if (USE_OMP)
    find_package(OpenMP)
    if (OpenMP_C_FOUND)
        add_definitions(-DOMP)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        list(APPEND EXTRA_C_LIBS ${OpenMP_C_LIBRARIES})
    else()
        message("OpenMP enabled but not found. Build without OpenMP.")
    endif()
endif()

if (ENABLE_CUDA AND USE_CUDNN)
    find_package(CUDNN)
    if (CUDNN_FOUND)
        set(HAS_CUDNN TRUE)
        add_definitions(-DENABLE_CUDNN)
        list(APPEND EXTRA_CUDA_LIBS ${CUDNN_LIBRARIES})
        include_directories(${CUDNN_INCLUDE_DIRS})
    else()
        message("cuDNN enabled but not found. Build without cuDNN.")
    endif()
endif()

if (ENABLE_CUDA AND USE_MULTI_GPU)
    find_package(MPI)
    find_package(NCCL)
    if (MPI_FOUND AND NCCL_FOUND)
        include_directories(${MPI_INCLUDE_PATH})
        include_directories(${NCCL_INCLUDE_DIRS})
        list(APPEND EXTRA_CUDA_LIBS ${MPI_LIBRARIES})
        list(APPEND EXTRA_CUDA_LIBS ${NCCL_LIBRARIES})
        add_definitions(-DMULTI_GPU)
    else()
        if (NOT MPI_FOUND)
            message("MPI not found.")
        endif()
        if (NOT NCCL_FOUND)
            message("NCCL not found.")
        endif()
        message("Build with MULTI_GPU disabled.")
    endif()
endif()

add_executable(train_gpt2 ${SOURCE}/train_gpt2.c)
add_executable(test_gpt2 ${SOURCE}/test_gpt2.c)
add_executable(train_gpt2cu ${SOURCE}/train_gpt2.cu)
add_executable(train_gpt2fp32cu ${SOURCE}/train_gpt2_fp32.cu)
add_executable(test_gpt2cu ${SOURCE}/test_gpt2.cu)
add_executable(test_gpt2fp32cu ${SOURCE}/test_gpt2_fp32.cu)
add_executable(profile_gpt2cu ${SOURCE}/profile_gpt2.cu)

target_link_libraries(train_gpt2 ${EXTRA_C_LIBS})
target_link_libraries(test_gpt2 ${EXTRA_C_LIBS})
target_link_libraries(train_gpt2cu ${EXTRA_CUDA_LIBS})
target_link_libraries(train_gpt2fp32cu ${EXTRA_CUDA_LIBS})
target_link_libraries(test_gpt2cu ${EXTRA_CUDA_LIBS})
target_link_libraries(test_gpt2fp32cu ${EXTRA_CUDA_LIBS})
target_link_libraries(profile_gpt2cu ${EXTRA_CUDA_LIBS})
